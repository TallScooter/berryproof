plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.190'
}

group = mod_group_id

// Use a consistent archivesBaseName
base {
    archivesName = "berryproof-${minecraft_version}-NeoForge"
}

version = mod_version

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenLocal()
    maven {
        name = 'NeoForged'
        url  = 'https://maven.neoforged.net/releases'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
  }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    // Pull in mixin-extras but drop its old asm-analysis:9.5
    implementation("io.github.llamalad7:mixinextras-neoforge:0.5.0") {
        exclude group: "org.ow2.asm", module: "asm-analysis"
    }
    implementation ("maven.modrinth:midnightlib:${project.midnightlib_version}")
}


runs {
    // common settings for all run configurations
    configureEach { run ->
        run.systemProperty("forge.logging.markers",           "REGISTRIES")
        run.systemProperty("forge.logging.console.level",     "debug")
        run.systemProperty("forge.enabledGameTestNamespaces", project.mod_id)
    }

    client {
        // client-only overrides (if any)
        systemProperty("forge.enabledGameTestNamespaces", project.mod_id)
    }

    server {
        // run server headlessly
        systemProperty("forge.enabledGameTestNamespaces", project.mod_id)
        getArguments().add("--nogui")
    }

    gameTestServer {
        systemProperty("forge.enabledGameTestNamespaces", project.mod_id)
    }

    data {
        // data generation invocation
        getArguments().addAll([
            "--mod",      project.mod_id,
            "--all",
            "--output",   file("src/generated/resources").absolutePath,
            "--existing", file("src/main/resources").absolutePath
        ])
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

tasks.withType(ProcessResources).configureEach {
    def replaceProps = [
        minecraft_version      : minecraft_version,
        minecraft_version_range: minecraft_version_range,
        neoforge_version       : neoforge_version,
        neoforge_version_range : neoforge_version_range,
        loader_version_range   : loader_version_range,
        mod_id                 : mod_id,
        mod_name               : mod_name,
        mod_license            : mod_license,
        mod_version            : mod_version,
        mod_authors            : mod_authors,
        mod_description        : mod_description,
    ]
    inputs.properties replaceProps

    filesMatching('META-INF/neoforge.mods.toml') {
        expand replaceProps
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = uri("${project.projectDir}/repo")
        }
    }
}

// Avoid the ASM module/classpath clash by forcing everything
// on the visible classpaths to use ASM 9.8
configurations.matching { cfg ->
    cfg.name in [
        'compileClasspath',
        'runtimeClasspath',
        'testCompileClasspath',
        'testRuntimeClasspath'
    ]
}.all {
    resolutionStrategy {
        force "org.ow2.asm:asm-analysis:9.8"
        force "org.ow2.asm:asm-tree:9.8"
    }
}